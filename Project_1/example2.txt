#Test Program 2:

function int foo(int alfa = 007){
    return alfa;
}

int bar(int x, int y = 20) {
    return x + y;
}



kachow() {
    # Declerations and initialization
    int x;
    int y, z, q;
    int a = 5;
    int b = 6, c = 4;
    y = 8;
    z = 5 + 7, q = 23;
    int minus = - 5;
    int m1 = -5, m2 = -9;
    int m3 =(-43);
    int m4 = (67-67);
    int m5 = 67-67;
    int m6 = (67-foo());
    double d1 = -43, d2 = 345., d3 = -32.34;
    int sum = 34 + 45.3;
    int sub = 34 - 43;
    int sub2 = 43- 34;
    int sub3 = 43 -34;
    int sub4 = 43-34       ;
    int sub5 = sub4-sub2;
    int sub6 = sub5         - sub2          ;
    vector<int> vec1 = {243,43,43,43,434,3};
    vector<int> vec2 = vector<int>(43+1);
    vector<vector<int>> multiple = vector<vector<int>(3)>(2); # not sure about that
    int alfa = 43; int beta = alfa+23;
    int teta = multiple[0][0];

    # Comments

    # bla bla bla bla # bla
    ## bla bla bla bla # alkfdbjadlfkbjdaflkbjadflkbjafdlkbj
    dalfkjbdlkfjb
    afdlkbjblkfdaj
    ## 
    int letsSeeCommentIsOkey = 43; # This shouldn't be a problem
    


    # Arithmatic Expressions and Operators (+ - * / % **)
    int sum1 = 34 + 45;            
    int sum2 = (34 + 45);           
    int sum3 = ((34) + (45));       # Multiple parentheses
    int sum4 = -34 + 45;            # Addition with negative
    int sum5 = 34 + (-45);          # Addition with parenthesized negative
    
    # Subtraction variations
    int sub1 = 34 - 43;             # Basic subtraction
    int sub2 = 43- 34;              # No space before operator
    int sub3 = 43 -34;              # No space after operator
    int sub4 = 43-34;               # No spaces
    int sub5 = (43)-(34);           # Parenthesized operands
    int sub6 = sub4-sub2;           # Variable subtraction
    int sub7 = (sub5         - sub2);  # Extra spaces
    
    # Multiplication tests
    int mult1 = 5 * 3;              # Basic multiplication
    int mult2 = -5 * 3;             # Negative first operand
    int mult3 = 5 * -3;             # Negative second operand
    int mult4 = -5 * -3;            # Both negative operands
    int mult5 = (5 * 3) * 2;        # Chained multiplication
    int mult6 = 5 * (3 * 2);        # Nested multiplication
    
    # Division tests
    int div1 = 15 / 3;              # Basic division
    int div2 = -15 / 3;             # Negative dividend
    int div3 = 15 / -3;             # Negative divisor
    int div4 = -15 / -3;            # Both negative
    double div5 = 10.0 / 3;         # Decimal division
    double div6 = (20.0 / 4) / 2;   # Chained division
    
    # Modulo operations
    int mod1 = 17 % 5;              # Basic modulo
    int mod2 = -17 % 5;             # Negative first operand
    int mod3 = 17 % -5;             # Negative second operand
    int mod4 = -17 % -5;            # Both negative
    int mod5 = (17 % 5) % 3;        # Chained modulo
    
    # Exponentiation tests
    int exp1 = 2 ** 3;              # Basic exponentiation
    int exp2 = 2 ** -3;             # Negative exponent
    int exp3 = -2 ** 3;             # Negative base
    int exp4 = (-2) ** 3;           # Parenthesized negative base
    int exp5 = 2 ** (3 ** 2);       # Nested exponentiation

    # Mixed operations
    int mix1 = 5 + 3 * 2;           # Addition and multiplication
    int mix2 = (5 + 3) * 2;         # Parenthesized addition then multiplication
    int mix3 = 15 - 3 * 2 + 4;      # Multiple operations
    int mix4 = 15 / 3 * 2 + 4 - 1;  # Complex expression
    int mix5 = 2 ** 3 * 4 + 5;      # Exponentiation with other operations
    
    # Edge cases and complex expressions
    int edge1 = ((((5))));         # Multiple closing parentheses
    int edge2 = -(-(-5));           # Multiple negations
    int edge3 = 5 * -(-3);          # Multiplication with double negation
    int edge4 = (5 + 3) * (2 - 1) / (3 + 0);  # Multiple parenthesized expressions
    int edge5 = 2 ** 2 ** 2;        # Multiple exponentiation

    # Vector arithmetic
    int vecSum = vec1[0] + vec1[1];
    int vecMult = vec1[2] * vec1[3];
    int vecComplex = (vec1[0] + vec1[1]) * (vec1[2] - vec1[3]) / vec1[4];
    
    # Function calls in expressions
    int func1 = foo() + 5;
    int func2 = foo(10) * 2;
    int func3 = bar(5) ** 2;
    int func4 = (foo() + bar()) / 2;


    # Loops
    int firstDim = 4;
    int secondDim = 3;
    vector<vector<int>> nestedVector = vector<vector<int>(firstDim)>(secondDim);

    for(int i = 0; i < firstDim; i++){
        for(int j = 0; i < secondDim; j++){
            kachout " Enter the [", (i+1), "][", (j+1) "]\n";
            kachin nestedVector[i][j];
        }   
    }
    return 0; 
}
