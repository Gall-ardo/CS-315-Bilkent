trunk<int> merge(trunk<int> left, int left_size, trunk<int> right, int right_size) {
    trunk<int> result = trunk<int>(left_size + right_size);
    int i = 0;      # Index for left array
    int j = 0;      # Index for right array
    int k = 0;      # Index for result array
    
    # Compare elements from both arrays and merge them in sorted order
    while (i < left_size && j < right_size) {
        if (left[i] <= right[j]) {
            result[k] = left[i];
            i++;
        } else {
            result[k] = right[j];
            j++;
        }
        k++;
    }
    
    # Copy remaining elements from left array, if any
    while (i < left_size) {
        result[k] = left[i];
        i++;
        k++;
    }
    
    # Copy remaining elements from right array, if any
    while (j < right_size) {
        result[k] = right[j];
        j++;
        k++;
    }
    
    return result;
}

# Main merge sort function
trunk<int> mergeSort(trunk<int> arr, int n) {
    # Base case: if array has 1 or fewer elements, it's already sorted
    if (n <= 1) {
        return arr;
    }
    
    # Calculate middle point
    int mid = n / 2;
    
    # Create left and right subarrays
    trunk<int> left = trunk<int>(mid);
    trunk<int> right = trunk<int>(n - mid);
    
    # Fill left subarray
    int i = 0;
    while (i < mid) {
        left[i] = arr[i];
        i++;
    }
    
    # Fill right subarray
    i = 0;
    while (i < n - mid) {
        right[i] = arr[mid + i];
        i++;
    }
    
    # Recursively sort left and right subarrays
    left = mergeSort(left, mid);
    right = mergeSort(right, n - mid);
    
    # Merge the sorted subarrays
    return merge(left, mid, right, n - mid);
}

# Main function to test merge sort
kachow() {
    # Test array
    trunk<int> arr = {64, 34, 25, 12, 22, 11, 90};
    int arr_size = 7;  # Explicitly specify size
    
    kachout "Original array:";
    int i = 0;
    while (i < arr_size) {
        kachout arr[i], " ";
        i++;
    }
    
    # Sort the array
    trunk<int> sorted = mergeSort(arr, arr_size);
    
    kachout "\nSorted array:";
    i = 0;
    while (i < arr_size) {
        kachout sorted[i], " ";
        i++;
    }
    
    return 0;
}